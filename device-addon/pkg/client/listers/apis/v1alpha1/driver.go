// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "open-cluster-management-io/addon-contrib/device-addon/pkg/apis/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DriverLister helps list Drivers.
// All objects returned here must be treated as read-only.
type DriverLister interface {
	// List lists all Drivers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Driver, err error)
	// Drivers returns an object that can list and get Drivers.
	Drivers(namespace string) DriverNamespaceLister
	DriverListerExpansion
}

// driverLister implements the DriverLister interface.
type driverLister struct {
	indexer cache.Indexer
}

// NewDriverLister returns a new DriverLister.
func NewDriverLister(indexer cache.Indexer) DriverLister {
	return &driverLister{indexer: indexer}
}

// List lists all Drivers in the indexer.
func (s *driverLister) List(selector labels.Selector) (ret []*v1alpha1.Driver, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Driver))
	})
	return ret, err
}

// Drivers returns an object that can list and get Drivers.
func (s *driverLister) Drivers(namespace string) DriverNamespaceLister {
	return driverNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DriverNamespaceLister helps list and get Drivers.
// All objects returned here must be treated as read-only.
type DriverNamespaceLister interface {
	// List lists all Drivers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Driver, err error)
	// Get retrieves the Driver from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Driver, error)
	DriverNamespaceListerExpansion
}

// driverNamespaceLister implements the DriverNamespaceLister
// interface.
type driverNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Drivers in the indexer for a given namespace.
func (s driverNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Driver, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Driver))
	})
	return ret, err
}

// Get retrieves the Driver from the indexer for a given namespace and name.
func (s driverNamespaceLister) Get(name string) (*v1alpha1.Driver, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("driver"), name)
	}
	return obj.(*v1alpha1.Driver), nil
}
